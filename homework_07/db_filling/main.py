"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏.

–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
  1. –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç) –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π.
  2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API (jsonplaceholder_requests).
  3. –í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –ø–æ—Å—Ç–æ–≤.
"""

import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from models import Base, engine, User, Post
from jsonplaceholder_requests import fetch_users_data, fetch_posts_data
from sqlalchemy.orm import sessionmaker
from sqlalchemy import inspect, text

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)


async def create_tables() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü 'users' –∏ 'posts' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –∏—Ö.
    """
    async with engine.begin() as conn:
        def check_and_create(sync_conn):
            inspector = inspect(sync_conn)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            if not inspector.has_table("users") or not inspector.has_table("posts"):
                print("–¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞—ë–º users –∏ posts...")
                Base.metadata.create_all(bind=sync_conn)
            else:
                print("–¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ.")

        await conn.run_sync(check_and_create)


async def insert_users(session: AsyncSession, users_data: list[dict]) -> None:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        users_data (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    users = [
        User(
            name=user["name"],
            username=user["username"],
            email=user["email"],
        )
        for user in users_data
    ]
    session.add_all(users)
    await session.commit()


async def insert_posts(session: AsyncSession, posts_data: list[dict]) -> None:
    """
    –í—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

    Args:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        posts_data (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–æ–≤.
    """
    posts = [
        Post(
            user_id=post["userId"],
            title=post["title"],
            body=post["body"],
        )
        for post in posts_data
    ]
    session.add_all(posts)
    await session.commit()


async def check_and_insert_posts(session: AsyncSession, posts_data: list[dict]) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ—Å—Ç—ã —Å ID –æ—Ç 1 –¥–æ 100.
    –ï—Å–ª–∏ —Ç–∞–∫–∏–µ –ø–æ—Å—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ posts_data.

    Args:
        session (AsyncSession): –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è SQLAlchemy.
        posts_data (list[dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–æ–≤.
    """
    result = await session.execute(
        text("SELECT id FROM posts WHERE id BETWEEN 1 AND 100")
    )
    existing_posts = result.fetchall()

    if existing_posts:
        print("–ü–æ—Å—Ç—ã —Å id 1‚Äì100 —É–∂–µ –µ—Å—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—Ç–∞–≤–∫—É.")
    else:
        print("–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç. –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É.")
        await insert_posts(session, posts_data)


async def async_main() -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
      - –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
      - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç–æ–≤.
      - –í—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    print("–ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await create_tables()

    users_data, posts_data = await asyncio.gather(
        fetch_users_data(), fetch_posts_data()
    )

    async with AsyncSessionLocal() as session:
        print("üë• –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        await insert_users(session, users_data)

        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã...")
        await check_and_insert_posts(session, posts_data)

    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    asyncio.run(async_main())


if __name__ == "__main__":
    main()
